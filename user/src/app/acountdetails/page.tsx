"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function AccountDetails() {
    const router = useRouter();

    const [user, setUser] = useState({
        id: "",
        name: "",
        address: "",
        phone: "",
    });

    useEffect(() => {
        if (typeof window !== "undefined") {
            const storedUser = localStorage.getItem("user");
            if (storedUser) {
                try {
                    const parsedUser = JSON.parse(storedUser);
                    if (!parsedUser.id) {
                        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
                        localStorage.removeItem("user");
                        router.push("/log/index.html");
                        return;
                    }

                    setUser({
                        id: parsedUser.id,  // ‚úÖ ƒê·∫£m b·∫£o ID lu√¥n c√≥ gi√° tr·ªã
                        name: parsedUser.name || "",
                        address: parsedUser.address || "",
                        phone: parsedUser.phone || "",
                    });
                } catch (error) {
                    console.error("L·ªói khi parse user:", error);
                    localStorage.removeItem("user");
                    router.push("/log/index.html");
                }
            } else {
                alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
                router.push("/log/index.html");
            }
        }
    }, []);


    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setUser((prevUser) => ({
            ...prevUser,
            [e.target.name]: e.target.value || "",
        }));
    };
    const handleSave = async () => {
        if (!user.id || isNaN(Number(user.id))) {
            alert("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID ng∆∞·ªùi d√πng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            router.push("/log/index.html");
            return;
        }
    
        try {
            const response = await fetch("https://glassmanagement.vercel.app/api/update-user-info", {
                method: "POST",
                credentials: "include",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(user),
            });
    
            if (!response.ok) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    
            const result = await response.json();
    
            console.log("üì¢ D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API:", result); // Ki·ªÉm tra response
    
            if (!result.message || !localStorage.getItem("user")) {
                throw new Error("D·ªØ li·ªáu API tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá!");
            }
    
            // L·∫•y d·ªØ li·ªáu c≈© t·ª´ localStorage
            const storedUser = JSON.parse(localStorage.getItem("user")!);
    
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu c≈© v·ªõi d·ªØ li·ªáu m·ªõi
            const updatedUser = {
                ...storedUser,
                name: user.name || storedUser.name,
                address: user.address || storedUser.address,
                phone: user.phone || storedUser.phone,
            };
    
            localStorage.setItem("user", JSON.stringify(updatedUser));
            alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
            router.push("/profile");
            router.refresh();
        } catch (error) {
            console.error("‚ùå L·ªói:", error);
            alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        }
    };
    
    return (
        <div className="mx-32 mb-20 mt-10">
            <div className="flex justify-center text-black py-10 rounded-lg bg-red-50 w-full">
                <div className="bg-white rounded-lg shadow p-20">
                    <h2 className="text-3xl font-bold bg-slate-200 p-2 px-3 rounded-lg text-center mb-6">
                        Edit User Form
                    </h2>
                    <div className="space-y-6 my-10 gap-2 grid">
                        <div className="flex justify-between">
                            <label className="font-medium flex items-center">Name:</label>
                            <input
                                type="text"
                                name="name"
                                value={user.name}
                                onChange={handleChange}
                                className="border bg-white px-2 py-1 rounded-md"
                            />
                        </div>
                        <div className="flex justify-between">
                            <label className="font-medium flex items-center">Address:</label>
                            <input
                                type="text"
                                name="address"
                                value={user.address}
                                onChange={handleChange}
                                className="border bg-white px-2 py-1 rounded-md"
                            />
                        </div>
                        <div className="flex justify-between">
                            <label className="font-medium flex items-center">Phone:</label>
                            <input
                                type="text"
                                name="phone"
                                value={user.phone}
                                onChange={handleChange}
                                className="border bg-white px-2 py-1 rounded-md"
                            />
                        </div>
                    </div>
                    <div className="flex justify-end mt-4">
                        <Link href={"/profile"}>
                            <button className="bg-gray-300 px-3 py-1 rounded mr-2">Cancel</button>
                        </Link>
                        <button onClick={handleSave} className="bg-blue-500 text-white px-5 py-1 rounded">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}
